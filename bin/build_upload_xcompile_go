
installGo() {
  #set -e            # fail fast
  #set -o pipefail   # don't ignore exit codes when piping output
  # set -x          # enable debugging

  # First, determine version of go to install.
  # Downlad correct version of go
  # cd into the go/src directory
  # set $GOROOT to the go directory
  # set $GOPATH to the go/src directory
  # git clone the cross-compile stuff
  # source the cross-compile.sh -- source golang-crosscompile/crosscompile.bash
  # loop through the supported platforms and run the go-crosscomple-build passing in the platform -- go-crosscompile-build-all
  #

  #GOVERSION="1.3.3"
  PLATFORMS="darwin/386 darwin/amd64 linux/386 linux/amd64 linux/arm windows/386 windows/amd64"
  BUILD_HOST_OS=$(uname | tr '[:upper:]' '[:lower:]')
  BUILD_HOST_ARCH=$(getconf LONG_BIT)
  # command playback
  #rm -rf $build_dir/work
  #mkdir /tmp/work
  #cd /tmp/work
  if test $BUILD_HOST_ARCH != "64"; then
    BUILD_HOST_ARCH="386"
  else
    BUILD_HOST_ARCH="amd64"
  fi

  go_url="https://storage.googleapis.com/golang/go${GOVERSION}.${BUILD_HOST_OS}-${BUILD_HOST_ARCH}.tar.gz"

  function echo() { builtin echo "-----> $*"; }

  echo "Curling for golang version ${GOVERSION}"
  #curl -s https://storage.googleapis.com/golang/go${GOVERSION}.${BUILD_HOST_OS}-${BUILD_HOST_ARCH} | tar -xzvf - #> /dev/null 2>&1
  curl $go_url -s -o - | tar xzf - -C $build_dir

  # need to check if we got a good download
  cd $build_dir/go/src
  sed -i.bak 's/\ -v\ /\ /g' make.bash

  echo "Compiling using ./make.bash"
  ./make.bash > /dev/null 2>&1

  export GOROOT="${build_dir}/go"
  export GOPATH="${GOROOT}/src"
  export PATH="${GOROOT}/bin:$PATH"

  cd $GOROOT/src
  echo "Cloning git://github.com/davecheney/golang-crosscompile.git"
  git clone git://github.com/davecheney/golang-crosscompile.git > /dev/null 2>&1
  pform=$PLATFORMS

  # need to check if we got a good clone
  source golang-crosscompile/crosscompile.bash

  for platform in $pform; do
    echo "Compiling for ${platform}..."
    go-crosscompile-build $platform > /dev/null 2>&1
  done

  unset -f echo

  cd $build_dir
  echo "-----> Tarballing linux-amd64-go-cc-build.tar.gz go..."
  tar -zcf go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}-go-cc-build.tar.gz go
  mv $build_dir/go $build_dir/vendor/lib/go

  export PATH="vendor/bin:$PATH"
  export S3_ACCESS_KEY_ID="${AWS_ACCESS}"
  echo -n $AWS_SECRET > secretkey.txt
  export S3_SECRET_ACCESS_KEY=$(cat secretkey.txt)

  echo "-----> Uploading tarball to gobuilds/go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}cc.tar.gz..."
  $bp_dir/vendor/bin/s3 put "force-cli" "gobuilds/go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}cc.tar.gz" $build_dir/go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}-go-cc-build.tar.gz

  rm -rf $build_dir/go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}-go-cc-build.tar.gz
  echo "-----> Crosscompile build complete for go ${GOVERSION}"
  echo "-----> Binaries have been saved to S3 force-cli/gobuilds/go${GOVERSION}-${BUILD_HOST_OS}-${BUILD_HOST_ARCH}-go-cc.tar.gz"

  #exitcode=$?
}
